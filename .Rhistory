y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 10), xlim = c(1, 12))
t3
xlab = NA, ylab = NA, ylim = c(6, 11), xlim = c(1, 12.5))
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 11), xlim = c(1, 12.5))
par(mar = c(5,5,5,2)) #Add margins space around graph for upper-label
t2 <- tapply(Weather$WindSpeed, Weather$Hour, mean, na.rm=TRUE)
t3 <- tapply(Weather$WindSpeed, Weather$Month, mean, na.rm=TRUE)
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 11), xlim = c(1, 12.5))
par(mar = c(5,5,5,2)) #Add margins space around graph for upper-label
t2 <- tapply(Weather$WindSpeed, Weather$Hour, mean, na.rm=TRUE)
t3 <- tapply(Weather$WindSpeed, Weather$Month, mean, na.rm=TRUE)
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(5, 10), xlim = c(1, 12.5))
par(mar = c(5,5,5,2)) #Add margins space around graph for upper-label
t2 <- tapply(Weather$WindSpeed, Weather$Hour, mean, na.rm=TRUE)
t3 <- tapply(Weather$WindSpeed, Weather$Month, mean, na.rm=TRUE)
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 11), xlim = c(1, 12.5))
?axis
par(mar = c(5,5,5,2)) #Add margins space around graph for upper-label
t2 <- tapply(Weather$WindSpeed, Weather$Hour, mean, na.rm=TRUE)
t3 <- tapply(Weather$WindSpeed, Weather$Month, mean, na.rm=TRUE)
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 10), xlim = c(1, 12.5))
par(mar = c(5,5,5,2)) #Add margins space around graph for upper-label
t2 <- tapply(Weather$WindSpeed, Weather$Hour, mean, na.rm=TRUE)
t3 <- tapply(Weather$WindSpeed, Weather$Month, mean, na.rm=TRUE)
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 11), xlim = c(1, 12.5))
axis(3, at = seq(0, 23, 1), labels = (seq(0,23,1)/2) , col="blue", col.axis="blue")
axis(3, at = seq(0, 23, 1), labels = ((seq(0,23,1)/2)+0.5) , col="blue", col.axis="blue")
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = ((seq(0,23,1)/2)+0.5) , col="blue", col.axis="blue")
axis(3, at = seq(0, 23, 1), labels = ((seq(0,23,1)/2)) , col="blue", col.axis="blue")
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = ((seq(0,23,1)/2)) , col="blue", col.axis="blue")
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
?axis
?seq
axis(3, at = seq(0, 23, by = 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, by = 1), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
axis(3, at = seq(0, 23, by = 2), labels = (seq(0,23,1)/2) + 0.5, col="blue", col.axis="blue")
axis(3, at = seq(0, 23, by = 2), labels = (seq(0,23,2)/2) + 0.5, col="blue", col.axis="blue")
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, by = 2), labels = (seq(0,23,2)/2) + 0.5, col="blue", col.axis="blue")
axis(3, at = seq(0, 23, by = 2), labels = (seq(0,23,2)/2), col="blue", col.axis="blue")
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 23, by = 2), labels = (seq(0,23,2)/2), col="blue", col.axis="blue")
axis(3, at = seq(0, 24, by = 2), labels = (seq(0,24,2)/2), col="blue", col.axis="blue")
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 24, by = 2), labels = (seq(0,24,2)/2), col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 11), xlim = c(1, 12.5))
# c) Wind Direction
axis(3, at = seq(0, 24, by = 2) -1, labels = (seq(0,24,2)/2), col="blue", col.axis="blue")
plot(x = seq(1, 24),
y = t2, lty = 1, type = "l")
# Creating upper-axis
axis(3, at = seq(0, 24, by = 2) -1, labels = (seq(0,24,2)/2), col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 11), xlim = c(1, 12.5))
# c) Wind Direction
par(mar = c(5,5,5,2)) #Add margins space around graph for upper-label
t2 <- tapply(Weather$WindSpeed, Weather$Hour, mean, na.rm=TRUE)
t3 <- tapply(Weather$WindSpeed, Weather$Month, mean, na.rm=TRUE)
plot(x = seq(1, 24),
y = t2, lty = 1,
type = "l",
ylab = "Wind Speed (mph)",
xlab = "Hour of Day")
# Creating upper-axis
axis(3, at = seq(0, 24, by = 2) -1, labels = (seq(0,24,2)/2), col="blue", col.axis="blue")
#points(t3, lty = 1, type = "l")
# Text for the upper-axis
mtext(side = 3, line = 2.3, "Month of Year", col = "blue")
# Necessary to plot secondary axis over first plot
par(new = TRUE)
# Reason for 12.5 value in xlim is that we had to create an offset of 0.5 for the axis earlier
plot(t3,
type = "l",
lty = 5,
col = "blue",
axes = FALSE,
xlab = NA, ylab = NA, ylim = c(6, 11), xlim = c(1, 12.5))
library(shiny)
library(ShinyDash)
library(leaflet)
source("sql.R")
setwd("~/Google Drive/Spring 2015/CS 368/Final_project/")
library(shiny)
library(ShinyDash)
library(leaflet)
source("sql.R")
shiny::runApp()
test <- list(Choice 1 = 1, Choice 2 = 2)
test <- list("Choice 1 = 1", "Choice 2 = 2")
test
namelist
nameList
test
test <- list("Choice 1" = 1, "Choice 2" = 2)
test
nameList
test
noquote(nameList)
ls
ls(0)
ls()
test
noquote(nameList)
?as.list
shiny::runApp()
noquote(nameList)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]],"\"", ",", sep = "")
shiny::runApp()
noquote(nameList)
test <- list("Zimbabwe" = "Zimbabwe", "Zambia" = "Zambia")
test
typeof(nameList)
typeof(test)
nameList <- as.list(name, as.name = TRUE)
nameList
nameList <- as.list(name, all.name = TRUE)
nameList
name <- paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]]"\"", sep = "")
name <- paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]]"\"", sep = "")
name <- paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = "")
nameList <- as.list(name, all.name = TRUE)
nameList
nameList <- as.list(name, all.names = TRUE)
nameList
nameList
test <- noquote(nameList)
test
names(nameList)
names(name)
?names
names(countryName)
nameList <- as.list(name, use.names = TRUE)
name <- paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = "")
nameList <- as.list(name, use.names = TRUE)
nameList
nameList <- as.list(name, use.names = TRUE)
?use.names
names(nameList) <- names(name)
nameList
countryName
names(nameList) <- names(countryName)
nameList
ls
ls
nameList
names(name) <- names(countryName)
name
name <- paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = "")
for(j in 1:countCountries)
{
# "Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3
#name <- noquote(paste("\"", countryName[[1]], "\"", " = ", countryName[[1]], sep = ""))
name <- paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = "")
}
nameList <- as.list(name, use.names = TRUE)
nameList
name <- assign(paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = ""), i)
for(j in 1:countCountries)
{
# "Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3
#name <- noquote(paste("\"", countryName[[1]], "\"", " = ", countryName[[1]], sep = ""))
name <- assign(paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = ""), j)
}
name
for(j in 1:countCountries)
{
# "Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3
#name <- noquote(paste("\"", countryName[[1]], "\"", " = ", countryName[[1]], sep = ""))
name <- paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = "")
}
nameList <- as.list(name, use.names = TRUE)
for(k in 1:countCountries)
{
names(nameList[[1]]) <- names(name[[1]])
}
nameList
library(RPostgreSQL)
# Initializing the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# Connecting to the database
con <- dbConnect(drv, dbname="final_project")
# Querying for the number of rows in the tables
countRows <- dbGetQuery(con, "SELECT count(*) FROM month_earthquake")[[1]]
countCountries <- dbGetQuery(con, "SELECT count(*) FROM countries")[[1]]
# Querying for the longitude
lon <- dbGetQuery(con, "SELECT ST_X(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the latitude
lat <- dbGetQuery(con, "SELECT ST_Y(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the depth
depth <- dbGetQuery(con, "SELECT ST_Z(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the mag
mag <- dbGetQuery(con, "SELECT mag FROM month_earthquake")
countryName <- dbGetQuery(con, "SELECT rtrim(name) FROM countries")
for(j in 1:countCountries)
{
# "Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3
#name <- noquote(paste("\"", countryName[[1]], "\"", " = ", countryName[[1]], sep = ""))
name <- paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = "")
}
nameList <- as.list(name, use.names = TRUE)
name[[1]]
nameList[[1]]
name
nameList
nameList <- noquote(as.list(name, use.names = TRUE))
nameList
name <- noquote(paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = ""))
for(j in 1:countCountries)
{
# "Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3
#name <- noquote(paste("\"", countryName[[1]], "\"", " = ", countryName[[1]], sep = ""))
name <- noquote(paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = ""))
}
name
countryName
countryName[[1]]
countryName[[1]][[1]]
nameList
for(k in 1:countCountries)
{
names(nameList[[1]]) <- names(countryName[[1]][[k]])
}
name
nameList
nameList[[1]]
nameList
noquote(nameList[[1]])
names(countryName[[1]][[1]])
names(countryName[[1]])
?names
for(k in 1:countCountries)
{
names(nameList[[k]]) <- countryName[[1]][[k]]
}
nameList
?trim
countryName
countryName[[1]]
countryName[[1]][[1]]
for(k in 1:countCountries)
{
names(nameList[[k]]) <- trim(countryName[[1]][[k]])
}
for(j in 1:countCountries)
{
# "Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3
#name <- noquote(paste("\"", countryName[[1]], "\"", " = ", countryName[[1]], sep = ""))
name <- noquote(paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = ""))
}
nameList <- as.list(name, use.names = TRUE)
for(k in 1:countCountries)
{
names(nameList[[k]]) <- countryName[[1]][[k]]
}
nameList
shiny::runApp()
nameList
nameList[[1]]
nameList[[2]]
tail(nameList)
head(nameList)
name
names(nameList[[k]]) <- trim(countryName[[1]][[k]])
countryName[[1]]
test <- countryName[[1]][[k]]
test <- countryName[[1]][[1]]
test
shiny::runApp()
names(nameList)
?names
nameList
noquote(nameList)
for(j in 1:countCountries)
{
# "Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3
#name <- noquote(paste("\"", countryName[[1]], "\"", " = ", countryName[[1]], sep = ""))
name <- noquote(paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = ""))
}
nameList <- noquote(as.list(name, use.names = TRUE))
for(k in 1:countCountries)
{
names(nameList[[k]]) <- countryName[[1]][[k]]
}
nameList
shiny::runApp()
typeof(countryName)
countryName
library(RPostgreSQL)
# Initializing the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# Connecting to the database
con <- dbConnect(drv, dbname="final_project")
# Querying for the number of rows in the tables
countRows <- dbGetQuery(con, "SELECT count(*) FROM month_earthquake")[[1]]
countCountries <- dbGetQuery(con, "SELECT count(*) FROM countries")[[1]]
# Querying for the longitude
lon <- dbGetQuery(con, "SELECT ST_X(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the latitude
lat <- dbGetQuery(con, "SELECT ST_Y(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the depth
depth <- dbGetQuery(con, "SELECT ST_Z(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the mag
mag <- dbGetQuery(con, "SELECT mag FROM month_earthquake")
# Querying the country names
countryName <- dbGetQuery(con, "SELECT rtrim(name) FROM countries")
typeof(countryName)
ls
countryName
countryName[[1]]
typeof(countryName[[1]])
list("Syria" = "Syria, "Belgium" = "Belgium")
list("Syria" = "Syria", "Belgium" = "Belgium")
name <- noquote(paste("\"", countryName[[1]], "\"", " = ", "\"",countryName[[1]], "\"", sep = ""))
name
list("Syria" = "Syria")
str(countryName)
head(countryName)
timsFunction <- function(a) {
list(a = a)
}
test <- sapply(countryName, timsFunction)
head(test)
head(countryName)
head(countryName[[1]])
t <- timsFunction(countryName[[1]])
t
countryName[[1]]
countryName
countryName[[1]][[1]]
countryName[[1]][[2]]
timsFunction <- function(a) {
list(a = a)
}
test <- sapply(countryName[[1]], timsFunction)
head(test)
library(RPostgreSQL)
# Initializing the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# Connecting to the database
con <- dbConnect(drv, dbname="final_project")
# Querying for the number of rows in the tables
countRows <- dbGetQuery(con, "SELECT count(*) FROM month_earthquake")[[1]]
countCountries <- dbGetQuery(con, "SELECT count(*) FROM countries")[[1]]
# Querying for the longitude
lon <- dbGetQuery(con, "SELECT ST_X(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the latitude
lat <- dbGetQuery(con, "SELECT ST_Y(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the depth
depth <- dbGetQuery(con, "SELECT ST_Z(ST_AsText(ST_GeomFromEWKB(wkb_geometry)))  FROM month_earthquake")
# Querying for the mag
mag <- dbGetQuery(con, "SELECT mag FROM month_earthquake")
# Querying the country names
countryName <- dbGetQuery(con, "SELECT rtrim(name) FROM countries")
timsFunction <- function(a) {
list(a = a)
}
test <- sapply(countryName[[1]], timsFunction)
head(test)
head(countrName[[1]])
head(countryName[[1]])
test
test2 <- names(CountryName[[1]][[1]]) <- countryName[[1]][[1]]
test2 <- names(countryName[[1]][[1]]) <- countryName[[1]][[1]]
test2
test2 <- names(countryName[[1]])
test2
test2 <- names(countryName[[1]][[1]])
test2
timsFunction <- function(a) {
list(a)
}
test <- sapply(countryName[[1]], timsFunction)
test
test
shiny::runApp()

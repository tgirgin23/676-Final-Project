USA[[1]]
head(USA[[1]])
head(USA[[1,]])
head(USA[1,])
head(USA[2,])
for (i in seq_along(USA)) {
out <- c(USA[i,],USA[i,],USA[i,])
}
for (i in seq_along(USA)) {
out <- c(USA[i,],USA[i,],USA[i,])
}
out
head(out)
out
tail(USA)
typeof(out)
out
head(USA)
for (i in seq_length(6904)) {
out <- c(USA[i,],USA[i,],USA[i,])
}
for (i in seq_len(6904)) {
out <- c(USA[i,],USA[i,],USA[i,])
}
out
tail(USA)
out
for (i in seq_len(6904)) {
out <- USA[i,])
}
for (i in seq_len(6904)) {
out <- USA[i,]
}
out
for (i in seq_len(6904)) {
circleMaker(USA[i,])
}
for (i in seq_len(6904)) {
circleMarker(USA[i,])
}
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
USA[1,]
USA <- dbGetQuery(con, "SELECT lat, lon, ids FROM month_earthquake AS e, county AS c
WHERE st_within(e.wkb_geometry, c.geom)
AND c.name_0 = 'United States'")
# Initializing the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# Connecting to the database
con <- dbConnect(drv, dbname="final_project")
USA <- dbGetQuery(con, "SELECT lat, lon, ids FROM month_earthquake AS e, county AS c
WHERE st_within(e.wkb_geometry, c.geom)
AND c.name_0 = 'United States'")
timsVector <- USA[1,]
timsV
timsVector
timsVector[1]
timsVector[2]
timsVector[3]
typeof(timsVector[1])
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
timsVector[1]
timsVector[2]
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
head(USAQuery)
countCountries <- dbGetQuery(con, "SELECT count(*) FROM countries")[[1]]
id <- "us10001rqc"
countCountries <- dbGetQuery(con, paste("select mag, depth, ids from month_earthquake
where ids = '", id, "'")
countCountries <- dbGetQuery(con, paste("select mag, depth, ids from month_earthquake
where ids = '", id, "'")
countCountries <- dbGetQuery(con, paste("select mag, depth, ids from month_earthquake
where ids = '", id, "'"))
infoPopup <- dbGetQuery(con, paste("select mag, depth, ids from month_earthquake
where ids = '", id, "'"))
paste("select mag, depth, ids from month_earthquake
where ids = '", id, "'")
paste("select mag, depth, ids from month_earthquake where ids = '", id, "'")
infoPopup <- dbGetQuery(con, paste("select mag, depth, ids from month_earthquake
where ids = '", id, "'", sep = ""))
paste("select mag, depth, ids from month_earthquake
where ids = '", id, "'", sep = "")
paste("select mag, depth, ids from month_earthquake where ids = '", id, "'", sep = "")
infoPopup <- dbGetQuery(con, paste("select mag, depth,", "ids", "from month_earthquake
, sep = ""))
infoPopup <- dbGetQuery(con, paste("select mag, depth,", "ids", "from month_earthquake", sep = ""))
paste("select mag, depth,", "ids", "from month_earthquake", sep = "")
infoPopup <- dbGetQuery(con, paste("select mag, depth,", " ids ", "from month_earthquake", sep = ""))
paste("select mag, depth,", " ids ", "from month_earthquake", sep = "")
infoPopup <- dbGetQuery(con, query)
dbGetQuery
dbGetQuery(con, "select mag, depth, ids from month_earthquake")
info <- dbGetQuery(con, "select mag, depth, ids from month_earthquake")
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
timsVector <- USAQuery[i,]
timsVector <- USAQuery[1,]
seq_len(6904)
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
head(timsVector)
head(timsVector[5])
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
query <- paste("SELECT mag, depth, ids, place FROM month_earthquake WHERE ids = '", id, "'", sep = "")
query[4]
query[3]
infoPopup <- dbGetQuery(con, query)
# Initializing the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# Connecting to the database
con <- dbConnect(drv, dbname="final_project")
infoPopup <- dbGetQuery(con, query)
infoPopup[3]
infoPopup[4]
gsub("^.*?_","of ",infoPopup[4])
gsub("^.*?_","f",infoPopup[4])
s1 = unlist(strsplit(infoPopup[4], split='of ', fixed=TRUE))[2]
s1 = unlist(strsplit(infoPopup[4], split='of ', fixed=TRUE))
s1 = unlist(strsplit(infoPopup[4], split='of ', fixed=TRUE))[1]
s1 = as.character(unlist(strsplit(infoPopup[4], split='of ', fixed=TRUE)))
s1 = unlist(strsplit(as.character(infoPopup[4]), split='of ', fixed=TRUE))[1]
s1
query <- paste("SELECT mag, depth, ids, place FROM month_earthquake WHERE ids = '", id, "'", sep = "")
infoPopup <- dbGetQuery(con, query)
infoPopup[4]
s1 = unlist(strsplit(as.character(infoPopup[4]), split='of ', fixed=TRUE))[2]
s1
infoPopup
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
magQuery <- paste("SELECT mag, depth, ids, place FROM month_earthquake, county
WHERE mag BETWEEN ", magRange[1], " AND ", magRange[2],
"AND st_within(month_earthquake.wkb_geometry, county.geom)
AND county.name_0 = '", input$select, "'", sep = "")
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
USAQuery <- dbGetQuery(con, "SELECT USAlon as lon, USAlat as lat, USAdepth as depth, mag, ids, count(*)
FROM month_earthquake
WHERE USAlon IS NOT NULL")
# Initializing the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# Connecting to the database
con <- dbConnect(drv, dbname="final_project")
USAQuery <- dbGetQuery(con, "SELECT USAlon as lon, USAlat as lat, USAdepth as depth, mag, ids, count(*)
FROM month_earthquake
WHERE USAlon IS NOT NULL")
magUSACount <- dbGetQuery(con, paste("SELECT count(*) FROM month_earthquake WHERE mag BETWEEN ",
magRange[1], " AND ", magRange[2], " AND usalat IS NOT NULL", sep = ""))
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
USAQuery <- dbGetQuery(con, "SELECT USAlon as lon, USAlat as lat, USAdepth as depth, mag, ids, count(*)
FROM month_earthquake
WHERE USAlon IS NOT NULL
AND mag BETWEEN ", 4, " AND ", 5, sep = "")
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
install.packages("dygraphs")
as.POSIXct(1428444614430/1000, origin="1970-01-01")
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
USAFunction(magRange[1], magRange[2])
USAFunction
USAQuery
USAFunction(3, 4)
USAQuery
min = 3
max = 4
USAQuery <- dbGetQuery(con, paste("SELECT USAlon as lon, USAlat as lat, USAdepth as depth, mag, ids
FROM month_earthquake
WHERE USAlon IS NOT NULL
AND mag BETWEEN ", min, " AND ", max, sep = ""))
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
drv <- dbDriver("PostgreSQL")
# Connecting to the database
con <- dbConnect(drv, dbname="final_project")
selCountryQuery <<- dbGetQuery(con, paste("SELECT lat, lon, depth, mag, place
FROM month_earthquake, countries
WHERE st_within(ST_GeomFromEWKB(month_earthquake.wkb_geometry),
countries.geom)
and countries.name LIKE 'Spain'"))
selCountryQuery
selCountryQuery[,]
selCountryQuery[,1]
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
newView <- dbGetQuery(con, paste("SELECT lat, lon FROM country_centroid WHERE name = 'Spain'", sep = "")
newView <- dbGetQuery(con, paste("SELECT lat, lon FROM country_centroid WHERE name = 'Spain'")
newView <- dbGetQuery(con, paste("SELECT lat, lon FROM country_centroid WHERE name = 'Spain'")
newView <- dbGetQuery(con, paste("SELECT lat, lon FROM country_centroid WHERE name = 'Spain'")
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
con <- dbConnect(drv, dbname="final_project")
usaCalc <- dbGetQuery(con, paste("select count(usalon), dt from month_earthquake
group by dt
order by dt asc"))
usaCalc
sum(usaCalc[,2])
sum(usaCalc[,1])
dateCalc <- graphCalc(selectedCountry)
dateCalc[,2]
dateCalc[,1]
dateCalc
hist(dateCalc[,1],
breaks = centileBreaks,
main = "Number of earthquakes",
xlab = "Date",
xlim = range(dateCalc[,2]),
col = '#00DD00',
border = 'white')
hist(dateCalc)
dateCalc
typeof(dateCalc)
as.data.frame(dateCalc)
test22 <- as.data.frame(dateCalc)
hist(test22)
barplot(dateCalc)
barplot(dateCalc$count)
hist(dateCalc$count)
hist(dateCalc$date)
hist(dateCalc$dt)
hist(dateCalc$dt, breaks 30)
hist(dateCalc$dt, breaks = 30)
dateCalc
hist(dateCalc$dt, breaks = 2)
?hist
install.packages(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
names(dateCalc)
qplot(x = dt)
qplot(x = dt, data = count)
qplot(x = dateCalc$dt, data = dateCalc$count)
qplot(x = dateCalc$dt)
dateCalc
hist(calcDate$dt)
hist(dateCalc$dt)
hist(dateCalc$dt, breaks = 30)
dateCalc$count
barplot(dateCalc$dt)
barplot(dateCalc$count)
usaCalc <- dbGetQuery(con, paste("select dt from month_earthquake WHERE usalon IS NOT NULL"))
usCalc
usaCalc
hist(dateCalc)
head(dateCalc)
hist(dateCalc$dt)
hist(dateCalc$dt, breaks = 30)
usaCalc <- dbGetQuery(con, paste("select dt from month_earthquake WHERE usalon IS NOT NULL"))
head(usaCalc)
hist(usaCalc$dt)
hist(usaCalc$dt, breaks = 30)
hist(usaCalc$dt, breaks = 30, freq=TRUE)
qplot(x = dateCalc$dt, geom="histogram")
qplot(x = dateCalc$dt, geom="histogram", binwidth = 30)
qplot(x = dateCalc$dt, geom="histogram", binwidth = 1)
qplot(x = dateCalc$dt, geom="histogram", binwidth = 2)
qplot(x = dateCalc$dt, geom="histogram", binwidth = 10)
qplot(x = dateCalc$dt, geom="histogram", binwidth = 30)
qplot(x = dateCalc$dt, geom="histogram", binwidth = 50)
qplot(x = dateCalc$dt, geom="histogram", binwidth = 15)
qplot(x = dateCalc$dt, geom_histogram(binwidth=.5))
ggplot2.histogram(data=dateCalc$dt, xName='weight')
install_github("easyGgplot2")
install.packages("devtools")
install_github("easyGgplot2")
library(devtools)
install_github("easyGgplot2")
install_github("easyGgplot2", "kassambara")
ggplot2.histogram(data=dateCalc$dt, xName='weight')
library(easyGgplot2)
ggplot2.histogram(data=dateCalc$dt, xName='weight')
ggplot(data=dateCalc$dt) +
geom_histogram(binwidth=.5)
updateGraph <- function()
{
output$histEarthquakes <- renderPlot({
dateCalc <- graphCalc(selectedCountry)
barplot(dateCalc$dt,
breaks = 30,
main = "Number of earthquakes",
xlab = "Date",
xlim = range(dateCalc[,2]),
col = '#00DD00',
border = 'white')
})
}
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
hist(dateCalc$dt,
breaks = centileBreaks,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
freq=TRUE
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
freq=TRUE,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
freq=TRUE,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 3,
freq=TRUE,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
freq=TRUE,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
dateCalc$dt
dateCalc
usaCalc <- dbGetQuery(con, paste("select dt from month_earthquake WHERE usalon IS NOT NULL"))
con <- dbConnect(drv, dbname="final_project")
# Calculating the number of occurences of earthquakes in the United States
usaCalc <- dbGetQuery(con, paste("select dt from month_earthquake WHERE usalon IS NOT NULL"))
return(usaCalc)
hist(dateCalc$dt,
breaks = 30,
freq=TRUE,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
freq=TRUE,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
#freq=TRUE,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
)
hist(dateCalc$dt,
breaks = 30,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
)
hist(dateCalc$dt,
breaks = 30,
main = "SuperZIP score (visible zips)",
col = '#00DD00',
)
hist(dateCalc$dt,
breaks = 30,
main = "SuperZIP score (visible zips)",
xlab = "Percentile",
xlim = dateCalc$dt,
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
main = "SuperZIP score (visible zips)",
xlab = "Percentile",
xlim = range(dateCalc$dt),
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 30,
freq=TRUE,
main = "SuperZIP score (visible zips)",
xlab = "Percentile",
xlim = range(dateCalc$dt),
col = '#00DD00',
border = 'white')
hist(dateCalc$dt,
breaks = 20,
freq=TRUE,
main = "SuperZIP score (visible zips)",
xlab = "Percentile",
xlim = range(dateCalc$dt),
col = '#00DD00',
border = 'white')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
shiny::runApp('Google Drive/Spring 2015/CS 368/Final_project')
